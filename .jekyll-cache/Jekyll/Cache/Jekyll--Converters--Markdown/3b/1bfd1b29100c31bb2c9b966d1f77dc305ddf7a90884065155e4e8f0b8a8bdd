I")<p>Argument resolver는 컨트롤러에서 특정값을 인자값으로 받을 때 사용된다.</p>

<p>예를 들어 컨트롤러에 다음과 같은 메서드가 있을 때</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/temp"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">temp</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">){</span> <span class="o">}</span>
</code></pre></div></div>

<p>별다른 설정이 없어도 request 에 데이터가 담겨있는걸 확인 할 수 있다.</p>

<p>이는 기본 HttpServletRequest가 기본 argument resolver에 포함되어있기 때문이다.</p>

<p>이렇게 기본적으로 제공하는 resolver 외에도 직접 만들어서 사용 할 수 있다.</p>

<p>resolver 클래스를 만든 후 java config나 xml방식 둘 중 하나로 등록이 가능하다.</p>

<p>boot환경은 대부분 java config로 하는듯 하다.</p>

<h3 id="1-resolver-클래스-만들기">1. resolver 클래스 만들기</h3>

<p>User 클래스가 있고, 해당 User를 컨트롤러에서 인자값으로 받는다고 가정해본다.</p>

<p>resolver는 HandlerMethodArgumentResolver를 구현해주면 된다.</p>

<p>supportsParameter는 인자값의 타입을 검증한다.</p>

<p>resolveArgument는 인자값에 전달 할 데이터를 반환한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserArgumentResolver</span> <span class="kd">implements</span> <span class="nc">HandlerMethodArgumentResolver</span><span class="o">{</span>
  
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">parameter</span><span class="o">.</span><span class="na">getParameterType</span><span class="o">());</span> <span class="c1">// 인자의 타입이 User인지 검증</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">parameter</span>
                                <span class="o">,</span> <span class="nc">ModelAndViewContainer</span> <span class="n">mavContainer</span>
                                <span class="o">,</span> <span class="nc">NativeWebRequest</span> <span class="n">webRequest</span>
                                <span class="o">,</span> <span class="nc">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
			
      <span class="nc">User</span> <span class="n">userArgument</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
      <span class="n">userArgument</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"jinseob"</span><span class="o">);</span>
      <span class="n">userArgument</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="s">"js"</span><span class="o">);</span>
      <span class="o">....</span>
      <span class="k">return</span> <span class="n">userArgument</span><span class="o">;</span>		
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="2-resolver-등록하기">2. resolver 등록하기</h3>

<p>config를 생성해서 해당 resolver를 등록해주면 된다.</p>

<p>WebMvcConfigurer에서 addArgumentResolvers를 구현해주면 된다.</p>

<p>Spring 5 이전 버전에서는 WebMvcConfigurerAdapter를 상속받아서 정의 할 수도 있다.
(WebMvcConfigurerAdapter는 Spring 5에서 Deprecated 되었다.)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebMvcConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addArgumentResolvers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerMethodArgumentResolver</span><span class="o">&gt;</span> <span class="n">resolvers</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">resolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">UserArgumentResolver</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 하면 모든 설정이 끝이다.</p>

<h3 id="3-값-확인해보기">3. 값 확인해보기</h3>

<p>이제 컨트롤러에서 다음과 같은 메서드가 있을 때</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/temp"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">temp</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">){</span> <span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">user.getName</code> 의 값은 <code class="language-plaintext highlighter-rouge">jinseob</code> 으로 나온다.</p>

:ET